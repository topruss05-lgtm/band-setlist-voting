---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    return Astro.redirect("/signin");
  }
} catch (error) {
  return Astro.redirect("/signin");
}

// Fetch all songs with user's votes
const { data: songs, error } = await supabase
  .from("songs")
  .select(`
    *,
    votes!inner(rating, user_id)
  `)
  .order("created_at", { ascending: false });

// Get user's votes
const { data: userVotes } = await supabase
  .from("votes")
  .select("song_id, rating")
  .eq("user_id", session.data.user.id);

const userVotesMap = new Map(
  userVotes?.map((v: any) => [v.song_id, v.rating]) || []
);

// Helper function to extract YouTube video ID
function getYouTubeVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/,
    /youtube\.com\/embed\/([^&\n?#]+)/,
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  return null;
}
---

<Layout title="Abstimmen - Band Setlist">
  <nav>
    <div class="nav-content">
      <h1>Band Setlist Voting</h1>
      <div>
        <a href="/dashboard">Dashboard</a>
        <a href="/suggest">Song vorschlagen</a>
        <a href="/setlist">Setliste</a>
        <a href="/api/auth/signout">Abmelden</a>
      </div>
    </div>
  </nav>
  <div class="container">
    <h2>Songs bewerten</h2>
    <p style="margin-bottom: 2rem;">
      <a href="/suggest" class="link">Neuen Song vorschlagen</a>
    </p>

    {songs && songs.length > 0 ? (
      <div id="songs-container">
        {songs.map((song: any) => {
          const videoId = getYouTubeVideoId(song.youtube_url);
          const userRating = userVotesMap.get(song.id) || 0;

          return (
            <div class="card song-card" data-song-id={song.id}>
              <h3>{song.title}</h3>

              {videoId && (
                <div class="video-container" style="margin: 1rem 0;">
                  <iframe
                    width="100%"
                    height="315"
                    src={`https://www.youtube.com/embed/${videoId}`}
                    title={song.title}
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                  ></iframe>
                </div>
              )}

              <div class="rating-container">
                <p style="margin-bottom: 0.5rem; font-weight: 500;">Deine Bewertung:</p>
                <div class="stars" data-song-id={song.id}>
                  {[1, 2, 3, 4, 5].map((star) => (
                    <span
                      class={`star ${star <= userRating ? 'active' : ''}`}
                      data-rating={star}
                    >
                      â˜…
                    </span>
                  ))}
                </div>
                <p class="rating-text" style="margin-top: 0.5rem; color: #64748b;">
                  {userRating > 0 ? `Du hast ${userRating} ${userRating === 1 ? 'Stern' : 'Sterne'} gegeben` : 'Noch nicht bewertet'}
                </p>
              </div>
            </div>
          );
        })}
      </div>
    ) : (
      <div class="card">
        <p>Noch keine Songs vorhanden. <a href="/suggest" class="link">Sei der Erste und schlage einen Song vor!</a></p>
      </div>
    )}
  </div>

  <style>
    .song-card {
      margin-bottom: 2rem;
    }

    .video-container {
      position: relative;
      padding-bottom: 56.25%;
      height: 0;
      overflow: hidden;
    }

    .video-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .rating-container {
      margin-top: 1rem;
    }

    .stars {
      display: flex;
      gap: 0.5rem;
      font-size: 2rem;
      cursor: pointer;
    }

    .star {
      color: #cbd5e1;
      transition: color 0.2s;
      cursor: pointer;
      user-select: none;
    }

    .star:hover,
    .star.hover {
      color: #fbbf24;
    }

    .star.active {
      color: #f59e0b;
    }
  </style>

  <script>
    // Handle star rating clicks
    document.querySelectorAll('.stars').forEach((starsContainer) => {
      const stars = starsContainer.querySelectorAll('.star');
      const songId = starsContainer.getAttribute('data-song-id');

      stars.forEach((star, index) => {
        // Hover effect
        star.addEventListener('mouseenter', () => {
          stars.forEach((s, i) => {
            if (i <= index) {
              s.classList.add('hover');
            } else {
              s.classList.remove('hover');
            }
          });
        });

        // Click to rate
        star.addEventListener('click', async () => {
          const rating = parseInt(star.getAttribute('data-rating') || '0');

          try {
            const response = await fetch('/api/songs/vote', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                song_id: songId,
                rating: rating,
              }),
            });

            if (response.ok) {
              // Update UI
              stars.forEach((s, i) => {
                if (i < rating) {
                  s.classList.add('active');
                } else {
                  s.classList.remove('active');
                }
              });

              // Update rating text
              const ratingText = starsContainer.parentElement?.querySelector('.rating-text');
              if (ratingText) {
                ratingText.textContent = `Du hast ${rating} ${rating === 1 ? 'Stern' : 'Sterne'} gegeben`;
              }
            } else {
              alert('Fehler beim Speichern der Bewertung');
            }
          } catch (error) {
            console.error('Error voting:', error);
            alert('Fehler beim Speichern der Bewertung');
          }
        });
      });

      // Remove hover effect when leaving stars container
      starsContainer.addEventListener('mouseleave', () => {
        stars.forEach((s) => s.classList.remove('hover'));
      });
    });
  </script>
</Layout>
