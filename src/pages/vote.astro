---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    return Astro.redirect("/signin");
  }
} catch (error) {
  return Astro.redirect("/signin");
}

// Fetch all songs
const { data: songs, error } = await supabase
  .from("songs")
  .select("*")
  .order("created_at", { ascending: false });

// Get user's votes
const { data: userVotes } = await supabase
  .from("votes")
  .select("song_id, rating")
  .eq("user_id", session.data.user.id);

const userVotesMap = new Map(
  userVotes?.map((v: any) => [v.song_id, v.rating]) || []
);

// Helper function to extract YouTube video ID
function getYouTubeVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/,
    /youtube\.com\/embed\/([^&\n?#]+)/,
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  return null;
}
---

<Layout title="Abstimmen - Blakerunners">
  <div class="min-h-screen flex flex-col">
    <!-- Navigation -->
    <nav class="border-b border-white/10 backdrop-blur-sm bg-white/5">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <a href="/dashboard">
            <span class="text-2xl font-bold bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent">
              Blakerunners
            </span>
          </a>

          <!-- Desktop Navigation -->
          <div class="hidden md:flex items-center space-x-4">
            <a href="/dashboard" class="text-gray-300 hover:text-white transition-colors font-medium">
              Dashboard
            </a>
            <a href="/suggest" class="text-gray-300 hover:text-white transition-colors font-medium">
              Vorschlagen
            </a>
            <a href="/setlist" class="text-gray-300 hover:text-white transition-colors font-medium">
              Setliste
            </a>
            <a href="/api/auth/signout" class="text-gray-400 hover:text-gray-300 transition-colors font-medium">
              Abmelden
            </a>
          </div>

          <!-- Mobile Menu Button -->
          <button id="mobile-menu-button" class="md:hidden text-gray-300 hover:text-white focus:outline-none" aria-label="Menu öffnen">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>

        <!-- Mobile Navigation Menu -->
        <div id="mobile-menu" class="hidden md:hidden pb-4">
          <div class="flex flex-col space-y-2">
            <a href="/dashboard" class="text-gray-300 hover:text-white transition-colors font-medium py-2 px-2 rounded hover:bg-white/5">
              Dashboard
            </a>
            <a href="/suggest" class="text-gray-300 hover:text-white transition-colors font-medium py-2 px-2 rounded hover:bg-white/5">
              Vorschlagen
            </a>
            <a href="/setlist" class="text-gray-300 hover:text-white transition-colors font-medium py-2 px-2 rounded hover:bg-white/5">
              Setliste
            </a>
            <a href="/api/auth/signout" class="text-gray-400 hover:text-gray-300 transition-colors font-medium py-2 px-2 rounded hover:bg-white/5">
              Abmelden
            </a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="flex-1 px-4 sm:px-6 lg:px-8 py-6 sm:py-12">
      <div class="max-w-4xl mx-auto">
        <div class="mb-6 sm:mb-8 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
          <div>
            <h2 class="text-3xl sm:text-4xl font-bold mb-2 bg-gradient-to-r from-white to-primary-300 bg-clip-text text-transparent">
              Songs bewerten
            </h2>
            <p class="text-gray-400 text-sm sm:text-base">Bewerte Songs mit 1-5 Sternen</p>
          </div>
          <a
            href="/suggest"
            class="bg-gradient-to-r from-primary-600 to-blue-600 hover:from-primary-700 hover:to-blue-700 px-6 py-3 rounded-lg font-semibold transition-all transform hover:scale-105 shadow-lg shadow-primary-500/50 whitespace-nowrap text-center"
          >
            + Neuer Song
          </a>
        </div>

        {songs && songs.length > 0 ? (
          <div id="songs-container" class="space-y-6">
            {songs.map((song: any) => {
              const videoId = getYouTubeVideoId(song.youtube_url);
              const userRating = userVotesMap.get(song.id) || 0;

              return (
                <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-4 sm:p-6 border border-white/10 song-card" data-song-id={song.id}>
                  <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-4 gap-2">
                    <h3 class="text-xl sm:text-2xl font-bold text-white">{song.title}</h3>
                    {song.suggested_by === session.data.user.id && (
                      <button
                        class="delete-btn bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg font-medium transition-all text-sm self-start"
                        data-song-id={song.id}
                        title="Song löschen"
                      >
                        Löschen
                      </button>
                    )}
                  </div>

                  {videoId && (
                    <div class="video-container mb-6 rounded-xl overflow-hidden bg-black">
                      <iframe
                        width="100%"
                        height="315"
                        src={`https://www.youtube.com/embed/${videoId}?playsinline=1&rel=0`}
                        title={song.title}
                        frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                        allowfullscreen
                        loading="lazy"
                        class="rounded-xl"
                        style="border: 0;"
                      ></iframe>
                    </div>
                  )}

                  <div class="rating-container bg-white/5 rounded-xl p-4">
                    <p class="text-sm font-medium text-gray-300 mb-3">Deine Bewertung:</p>
                    <div class="stars flex gap-2 sm:gap-3" data-song-id={song.id}>
                      {[1, 2, 3, 4, 5].map((star) => (
                        <span
                          class={`star text-3xl sm:text-4xl cursor-pointer select-none transition-all touch-manipulation ${star <= userRating ? 'text-amber-500' : 'text-slate-600'}`}
                          data-rating={star}
                        >
                          ★
                        </span>
                      ))}
                    </div>
                    <p class="rating-text mt-3 text-sm text-gray-400">
                      {userRating > 0 ? `Du hast ${userRating} ${userRating === 1 ? 'Stern' : 'Sterne'} gegeben` : 'Noch nicht bewertet'}
                    </p>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-6 sm:p-8 border border-white/10 text-center">
            <p class="text-gray-400 text-sm sm:text-base">
              Noch keine Songs vorhanden. <a href="/suggest" class="text-primary-400 hover:text-primary-300 font-medium transition-colors">Sei der Erste und schlage einen Song vor!</a>
            </p>
          </div>
        )}
      </div>
    </div>
  </div>

  <style>
    .video-container {
      position: relative;
      padding-bottom: 56.25%;
      height: 0;
      overflow: hidden;
    }

    .video-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .star:hover,
    .star.hover {
      color: #fbbf24 !important;
    }
  </style>

  <script>
    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Handle star rating clicks
    document.querySelectorAll('.stars').forEach((starsContainer) => {
      const stars = starsContainer.querySelectorAll('.star');
      const songId = starsContainer.getAttribute('data-song-id');

      stars.forEach((star, index) => {
        // Hover effect
        star.addEventListener('mouseenter', () => {
          stars.forEach((s, i) => {
            if (i <= index) {
              s.classList.add('hover');
            } else {
              s.classList.remove('hover');
            }
          });
        });

        // Click to rate
        star.addEventListener('click', async () => {
          const rating = parseInt(star.getAttribute('data-rating') || '0');

          try {
            const response = await fetch('/api/songs/vote', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                song_id: songId,
                rating: rating,
              }),
            });

            if (response.ok) {
              // Update UI
              stars.forEach((s, i) => {
                if (i < rating) {
                  s.classList.remove('text-slate-600');
                  s.classList.add('text-amber-500');
                } else {
                  s.classList.remove('text-amber-500');
                  s.classList.add('text-slate-600');
                }
              });

              // Update rating text
              const ratingText = starsContainer.parentElement?.querySelector('.rating-text');
              if (ratingText) {
                ratingText.textContent = `Du hast ${rating} ${rating === 1 ? 'Stern' : 'Sterne'} gegeben`;
              }
            } else {
              alert('Fehler beim Speichern der Bewertung');
            }
          } catch (error) {
            console.error('Error voting:', error);
            alert('Fehler beim Speichern der Bewertung');
          }
        });
      });

      // Remove hover effect when leaving stars container
      starsContainer.addEventListener('mouseleave', () => {
        stars.forEach((s) => s.classList.remove('hover'));
      });
    });

    // Handle delete button clicks
    document.querySelectorAll('.delete-btn').forEach((button) => {
      button.addEventListener('click', async (e) => {
        const songId = button.getAttribute('data-song-id');

        if (!confirm('Möchtest du diesen Song wirklich löschen?')) {
          return;
        }

        try {
          const response = await fetch('/api/songs/delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              song_id: songId,
            }),
          });

          if (response.ok) {
            // Remove song card from DOM
            const songCard = document.querySelector(`.song-card[data-song-id="${songId}"]`);
            if (songCard) {
              songCard.remove();
            }

            // Check if there are no more songs
            const songsContainer = document.getElementById('songs-container');
            if (songsContainer && songsContainer.children.length === 0) {
              location.reload();
            }
          } else {
            alert('Fehler beim Löschen des Songs');
          }
        } catch (error) {
          console.error('Error deleting song:', error);
          alert('Fehler beim Löschen des Songs');
        }
      });
    });
  </script>
</Layout>
